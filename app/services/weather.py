import httpx
from fastapi import HTTPException
from typing import Dict, Any

# –°–ª–æ–≤–∞—Ä—å: weathercode -> –æ–ø–∏—Å–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
WEATHER_CODE_MAP = {
    0: "‚òÄÔ∏è –Ø—Å–Ω–æ",
    1: "üå§ –ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
    2: "‚õÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    3: "‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ",
    45: "üå´ –¢—É–º–∞–Ω",
    48: "üå´ –ó–∞–º–µ—Ä–∑–∞—é—â–∏–π —Ç—É–º–∞–Ω",
    51: "üå¶ –õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å",
    53: "üåß –£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å",
    55: "üåß –°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
    61: "üå¶ –õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å",
    63: "üåß –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
    65: "üåß –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    71: "üå® –õ—ë–≥–∫–∏–π —Å–Ω–µ–≥",
    73: "‚ùÑÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥",
    75: "‚ùÑÔ∏è –°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
    80: "üå¶ –õ–∏–≤–Ω–∏",
    95: "‚õà –ì—Ä–æ–∑–∞",
    96: "‚õà –ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
}

def decode_weather_code(code: int) -> str:
    return WEATHER_CODE_MAP.get(code, "üåà –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

async def get_city_coordinates(city: str) -> Dict[str, float]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Open-Meteo Geocoding API."""
    async with httpx.AsyncClient() as client:
        response = await client.get(
            "https://geocoding-api.open-meteo.com/v1/search",
            params={"name": city, "count": 1}
        )
        if response.status_code != 200 or not response.json().get("results"):
            raise HTTPException(status_code=404, detail="–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        results = response.json()["results"][0]
        return {"latitude": results["latitude"], "longitude": results["longitude"]}

async def get_weather_forecast(city: str) -> Dict[str, Any]:
    coords = await get_city_coordinates(city)
    async with httpx.AsyncClient() as client:
        response = await client.get(
            "https://api.open-meteo.com/v1/forecast",
            params={
                "latitude": coords["latitude"],
                "longitude": coords["longitude"],
                "current": "temperature_2m,weathercode,windspeed_10m,pressure_msl,relative_humidity_2m",
                "hourly": "temperature_2m,weathercode",
                "forecast_days": 1
            }
        )
        if response.status_code != 200:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
        data = response.json()
        return {
            "city": city,
            "current": {
                "temperature": data["current"]["temperature_2m"],
                "weathercode": data["current"]["weathercode"],
                "weatherdesc": decode_weather_code(data["current"]["weathercode"]),
                "wind": data["current"]["windspeed_10m"],
                "pressure": round(data["current"]["pressure_msl"] / 1.333),
                "humidity": data["current"]["relative_humidity_2m"]
            },
            "hourly": [
                {
                    "time": data["hourly"]["time"][i],
                    "temperature": data["hourly"]["temperature_2m"][i],
                    "weathercode": data["hourly"]["weathercode"][i],
                    "weatherdesc": decode_weather_code(data["hourly"]["weathercode"][i])
                }
                for i in range(0, 24, 3)
            ]
        }